// Automatically generated by MockGen. DO NOT EDIT!
// Source: types.go

package domain

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of SessionStore interface
type MockSessionStore struct {
	ctrl     *gomock.Controller
	recorder *_MockSessionStoreRecorder
}

// Recorder for MockSessionStore (not exported)
type _MockSessionStoreRecorder struct {
	mock *MockSessionStore
}

func NewMockSessionStore(ctrl *gomock.Controller) *MockSessionStore {
	mock := &MockSessionStore{ctrl: ctrl}
	mock.recorder = &_MockSessionStoreRecorder{mock}
	return mock
}

func (_m *MockSessionStore) EXPECT() *_MockSessionStoreRecorder {
	return _m.recorder
}

func (_m *MockSessionStore) FindSessionAvailableAt(sessionID string, instant time.Time) (*Session, bool) {
	ret := _m.ctrl.Call(_m, "FindSessionAvailableAt", sessionID, instant)
	ret0, _ := ret[0].(*Session)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockSessionStoreRecorder) FindSessionAvailableAt(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindSessionAvailableAt", arg0, arg1)
}

func (_m *MockSessionStore) StartSession(user User, userSessionDuration time.Time) (*Session, error) {
	ret := _m.ctrl.Call(_m, "StartSession", user, userSessionDuration)
	ret0, _ := ret[0].(*Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionStoreRecorder) StartSession(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartSession", arg0, arg1)
}

func (_m *MockSessionStore) DeleteSession(sessionID string) error {
	ret := _m.ctrl.Call(_m, "DeleteSession", sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSessionStoreRecorder) DeleteSession(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSession", arg0)
}

func (_m *MockSessionStore) UpdateSession(sessionID string, userSessionDuration time.Time) error {
	ret := _m.ctrl.Call(_m, "UpdateSession", sessionID, userSessionDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSessionStoreRecorder) UpdateSession(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSession", arg0, arg1)
}

// Mock of UserStore interface
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *_MockUserStoreRecorder
}

// Recorder for MockUserStore (not exported)
type _MockUserStoreRecorder struct {
	mock *MockUserStore
}

func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &_MockUserStoreRecorder{mock}
	return mock
}

func (_m *MockUserStore) EXPECT() *_MockUserStoreRecorder {
	return _m.recorder
}

func (_m *MockUserStore) RegisterUser(request UserRegistrationRequest) (*User, error) {
	ret := _m.ctrl.Call(_m, "RegisterUser", request)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserStoreRecorder) RegisterUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterUser", arg0)
}

func (_m *MockUserStore) Authenticate(request UserLoginRequest) (*User, error) {
	ret := _m.ctrl.Call(_m, "Authenticate", request)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserStoreRecorder) Authenticate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Authenticate", arg0)
}

// Mock of AccountStore interface
type MockAccountStore struct {
	ctrl     *gomock.Controller
	recorder *_MockAccountStoreRecorder
}

// Recorder for MockAccountStore (not exported)
type _MockAccountStoreRecorder struct {
	mock *MockAccountStore
}

func NewMockAccountStore(ctrl *gomock.Controller) *MockAccountStore {
	mock := &MockAccountStore{ctrl: ctrl}
	mock.recorder = &_MockAccountStoreRecorder{mock}
	return mock
}

func (_m *MockAccountStore) EXPECT() *_MockAccountStoreRecorder {
	return _m.recorder
}

func (_m *MockAccountStore) InsertAccount(UserID string, account Account) (string, error) {
	ret := _m.ctrl.Call(_m, "InsertAccount", UserID, account)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountStoreRecorder) InsertAccount(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InsertAccount", arg0, arg1)
}

func (_m *MockAccountStore) GetAccounts(userID string) (*[]Account, error) {
	ret := _m.ctrl.Call(_m, "GetAccounts", userID)
	ret0, _ := ret[0].(*[]Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountStoreRecorder) GetAccounts(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccounts", arg0)
}

func (_m *MockAccountStore) Deposit(account Account) (*Account, error) {
	ret := _m.ctrl.Call(_m, "Deposit", account)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountStoreRecorder) Deposit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Deposit", arg0)
}

func (_m *MockAccountStore) Withdraw(account Account) error {
	ret := _m.ctrl.Call(_m, "Withdraw", account)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAccountStoreRecorder) Withdraw(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Withdraw", arg0)
}

func (_m *MockAccountStore) DeleteAccount(userID string, accountID string) error {
	ret := _m.ctrl.Call(_m, "DeleteAccount", userID, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAccountStoreRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAccount", arg0, arg1)
}

func (_m *MockAccountStore) GetHistory(historyRequest History) (*[]History, error) {
	ret := _m.ctrl.Call(_m, "GetHistory", historyRequest)
	ret0, _ := ret[0].(*[]History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountStoreRecorder) GetHistory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHistory", arg0)
}
